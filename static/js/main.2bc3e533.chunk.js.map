{"version":3,"sources":["components/Api.js","components/Sidebar.js","components/Table.js","components/SearchForm.js","components/Home.js","components/useResizeObserver.js","components/World.js","components/Control.js","components/App.js","index.js","assets/covid.png"],"names":["loadData","axios","all","get","then","response","globalData","data","countryData","usaData","catch","error","console","log","Sidebar","globaldata","lastupdated","moment","updated","startOf","fromNow","Card","Body","Header","style","fontSize","Text","className","cases","recovered","deaths","critical","active","todayCases","todayDeaths","Footer","DataTable","rows","searchTerm","columns","searchColumn","filteredData","filter","item","toLowerCase","includes","map","column","i","key","country","index","name","ReusableSearchForm","setSearchText","searchText","placeholder","Form","Row","Group","as","Col","Control","value","type","onChange","event","target","HomePage","countrydata","usadata","searchCountry","setSearchCountry","searchUsaState","setSearchUsaState","modifiedUsaData","row","Container","SearchForm","useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","WorldMap","svgRef","useRef","wrappedRef","dimension","selectedCountry","setSelectedCountry","mapApi","features","mapCountry","countryCode","properties","iso_a3","covid","find","cd","countryInfo","iso3","svg","select","minInfection","min","feature","maxInfection","max","colorScale","scaleLinear","domain","range","getBoundingClientRect","width","height","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","selectAll","join","on","attr","transition","text","marginBottom","setGlobaladata","setContrydata","setUsadata","isLoading","setIsLoading","loadingError","setLoadingError","a","apiResult","exact","path","World","App","Navbar","collapseOnSelect","expand","bg","variant","sticky","Brand","to","src","image","margin-right","alt","Nav","Link","href","eventKey","Toggle","aria-controls","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2bc3e533.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst loadData = () => {\n  return axios\n    .all([\n      axios.get(\"https://corona.lmao.ninja/v2/all\"),\n      axios.get(\"https://corona.lmao.ninja/v2/countries?yesterday&sort\"),\n      axios.get(\"https://corona.lmao.ninja/v2/states?sort&yesterday\"),\n    ])\n    .then((response) => {\n      return {\n        globalData: response[0].data,\n        countryData: response[1].data,\n        usaData: response[2].data,\n      };\n    })\n    .catch((error) => {\n      console.log(error);\n      return {};\n    });\n};\n\nexport default loadData;\n","import React from \"react\";\nimport \"./Sidebar.css\";\nimport { Card } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst Sidebar = ({ globaldata }) => {\n  let lastupdated = moment(globaldata.updated).startOf(\"hour\").fromNow();\n\n  return (\n    <div>\n      <Card>\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"25px\" }}>Global Data</Card.Header>\n          <div style={{ fontSize: \"20px\" }}>\n            <Card.Text>\n              Total Cases: <span className=\"cases\">{globaldata.cases}</span>\n            </Card.Text>\n            <Card.Text>\n              Recovered:{\" \"}\n              <span className=\"recovered\">{globaldata.recovered}</span>{\" \"}\n            </Card.Text>\n            <Card.Text>\n              Deaths: <span className=\"deaths\">{globaldata.deaths}</span>\n            </Card.Text>\n            <Card.Text>\n              {\" \"}\n              Critical: <span className=\"critical\">{globaldata.critical}</span>\n            </Card.Text>\n            <Card.Text>\n              Active Cases: <span className=\"active\"> {globaldata.active}</span>\n            </Card.Text>\n            <Card.Text>\n              New Cases:{\" \"}\n              <span className=\"new-cases\">{globaldata.todayCases}</span>{\" \"}\n            </Card.Text>\n            <Card.Text>\n              {\" \"}\n              New Deaths:\n              <span className=\"new-deaths\">{globaldata.todayDeaths}</span>\n            </Card.Text>\n          </div>\n        </Card.Body>\n        <Card.Footer>\n          <Card.Header className=\"text-muted\"> Last updated:</Card.Header>\n          <Card.Text className=\"text-muted\"> {lastupdated}</Card.Text>\n        </Card.Footer>\n      </Card>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport \"./Table.css\";\nimport PropTypes from \"prop-types\";\nimport { StickyTable, Row as TableRow, Cell } from \"react-sticky-table\";\n// import { Row, Card, Col } from \"react-bootstrap\";\n\nconst DataTable = ({ rows, searchTerm, columns, searchColumn }) => {\n  // let lastupdated = moment(globaldata.updated).startOf(\"hour\").fromNow();\n\n  const columnHeaders = [\n    \"Name\",\n    \"Cases\",\n    \"Active\",\n    \"Recovered\",\n    \"Deaths\",\n    \"NewCases\",\n    \"NewDeaths\",\n  ];\n\n  const filteredData =\n    searchTerm === \"\"\n      ? rows\n      : rows.filter((item) =>\n          item[searchColumn].toLowerCase().includes(searchTerm)\n        );\n\n  return (\n    <>\n      <StickyTable>\n        <TableRow className=\"header\" style={{}}>\n          {columnHeaders.map((column, i) => (\n            <Cell key={i}>{column}</Cell>\n          ))}\n        </TableRow>\n\n        {filteredData.map((country, index) => (\n          <TableRow key={index} className={index % 2 === 0 ? \"odd\" : \"even\"}>\n            {columns.map((name, i) => (\n              <Cell key={i}> {country[name]}</Cell>\n            ))}\n          </TableRow>\n        ))}\n      </StickyTable>\n    </>\n  );\n};\n\nDataTable.propTypes = {\n  rows: PropTypes.array,\n};\nexport default DataTable;\n","import React from \"react\";\nimport { Col, Form } from \"react-bootstrap\";\n\nconst ReusableSearchForm = ({ setSearchText, searchText, placeholder }) => {\n  return (\n    <Form>\n      <Form.Row>\n        <div className=\"mb-2 ml-auto\">\n          <Form.Group as={Col}>\n            <Form.Control\n              value={searchText}\n              type=\"text\"\n              placeholder={placeholder}\n              onChange={(event) => setSearchText(event.target.value)}\n            />\n          </Form.Group>\n        </div>\n      </Form.Row>\n    </Form>\n  );\n};\n\nexport default ReusableSearchForm;\n","import React from \"react\";\nimport \"./Home.css\";\nimport Sidebar from \"./Sidebar\";\nimport DataTable from \"./Table\";\nimport SearchForm from \"./SearchForm\";\nimport { Container } from \"react-bootstrap\";\n\nexport default function HomePage({\n  countrydata,\n  globaldata,\n  usadata,\n  searchCountry,\n  setSearchCountry,\n  searchUsaState,\n  setSearchUsaState,\n}) {\n  const modifiedUsaData = usadata.map((row) => ({\n    ...row,\n    recovered: row.cases - row.active,\n  }));\n\n  return (\n    <>\n      <Container>\n        <div className=\"row\">\n          <div className=\"col-xs-12 col-md-3\">\n            <Sidebar globaldata={globaldata} />\n          </div>\n\n          {/* CountryWise data */}\n          <div className=\"col\">\n            <div className=\"data\">\n              <div className=\"sticky\">\n                <h1>World COVID-19 Stats</h1>\n\n                <SearchForm\n                  setSearchText={setSearchCountry}\n                  searchText={searchCountry}\n                  placeholder=\"Search a country\"\n                />\n              </div>\n              <DataTable\n                rows={countrydata}\n                searchTerm={searchCountry}\n                searchColumn=\"country\"\n                columns={[\n                  \"country\",\n                  \"cases\",\n                  \"active\",\n                  \"recovered\",\n                  \"deaths\",\n                  \"todayCases\",\n                  \"todayDeaths\",\n                ]}\n              />\n            </div>\n\n            {/* USA API */}\n\n            <div className=\"data\">\n              <div className=\"sticky\">\n                <h1>USA COVID-19 Stats</h1>\n                <SearchForm\n                  setSearchText={setSearchUsaState}\n                  searchText={searchUsaState}\n                  placeholder=\"Search State\"\n                />\n              </div>\n\n              <DataTable\n                // globaldata={globaldata}\n                rows={modifiedUsaData}\n                searchTerm={searchUsaState}\n                searchColumn=\"state\"\n                columns={[\n                  \"state\",\n                  \"cases\",\n                  \"active\",\n                  \"recovered\",\n                  \"deaths\",\n                  \"todayCases\",\n                  \"todayDeaths\",\n                ]}\n              />\n            </div>\n          </div>\n        </div>\n      </Container>\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\n/**\n * Hook, that returns the current dimensions of an HTML element.\n * Doesn't play well with SVG.\n */\n\nconst useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoMercator, geoPath, min, max, scaleLinear, event } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\nfunction WorldMap({ data, countrydata }) {\n  const svgRef = useRef();\n  const wrappedRef = useRef();\n  const dimension = useResizeObserver(wrappedRef);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  // combining worldMap data with Covid 19 API\n  const mapApi = data.features.map((mapCountry) => {\n    const countryCode = mapCountry.properties.iso_a3;\n    const covid = countrydata.find((cd) => {\n      return cd.countryInfo.iso3 === countryCode;\n    });\n    mapCountry.properties.covid = covid;\n    return { ...mapCountry, properties: { ...mapCountry.properties, covid } };\n  });\n  //console.log(mapApi);\n  // console.log(data.features);\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const minInfection = min(mapApi, (feature) => {\n      if (!feature.properties.covid) return undefined;\n      return feature.properties.covid.active;\n    });\n    const maxInfection = max(mapApi, (feature) => {\n      if (!feature.properties.covid) return undefined;\n      return feature.properties.covid.active;\n    });\n    console.log(minInfection);\n    console.log(maxInfection);\n\n    const colorScale = scaleLinear()\n      .domain([minInfection, maxInfection])\n      .range([\"#ffe6e6\", \"#FF0000\"]);\n    //use resize dimension\n    //but fall back to getBoundingClientRect, if no dimension yet.\n    const { width, height } =\n      dimension || wrappedRef.current.getBoundingClientRect();\n\n    // project geo-co-ordinates on a 2D plane\n    const projection = geoMercator()\n      .fitSize([width, height], selectedCountry || data)\n      .precision(100);\n\n    // takes geojson data,\n    // transforms that into the d attribute of a path element\n    const pathGenerator = geoPath().projection(projection);\n\n    // // tooltip\n    // var div = svg\n    //   .selectAll(\".tooltip-country\")\n    //   .data([selectedCountry])\n    //   .join(\"div\")\n    //   .attr(\"class\", \"tooltip-country\")\n    //   .style(\"opacity\", 0);\n\n    // render each country\n    svg\n      .selectAll(\".country\")\n      .data(data.features)\n      .join(\"path\")\n      // for zooming map\n      .on(\"click\", (feature) => {\n        setSelectedCountry(selectedCountry === feature ? null : feature);\n      })\n      // .on(\"mouseover\", (d, i) => {\n      //   div\n      //     .select(\".tooltip-country\")\n      //     .transition()\n      //     .duration(\"50\")\n      //     .attr(\"opacity\", \".85\");\n      //   div.transition().duration(50).style(\"opacity\", 1);\n\n      //   div\n      //     .html(\"<div>Foo bar</div>\")\n      //     .style(\"left\", event.pageX + 10 + \"px\")\n      //     .style(\"top\", event.pageY - 15 + \"px\");\n      // })\n      // .on(\"mouseout\", (d, i) => {\n      //   select(this).transition().duration(\"50\").attr(\"opacity\", \"1\");\n      //   div.transition().duration(\"50\").style(\"opacity\", 0);\n      // })\n      .attr(\"class\", \"country\")\n      .attr(\"fill\", (feature) =>\n        colorScale(\n          (feature.properties.covid && feature.properties.covid.active) || 0\n        )\n      )\n      .attr(\"stroke\", \"black\")\n      .transition()\n      .attr(\"d\", (feature) => pathGenerator(feature));\n\n    // render text\n    svg\n      .selectAll(\".label\")\n      .data([selectedCountry])\n      .join(\"text\")\n      .attr(\"class\", \"label\")\n      .text((feature) => {\n        if (feature && feature.properties && feature.properties.covid)\n          return `active cases: ${feature.properties.covid.active}`;\n        return \"\";\n      })\n      .attr(\"x\", 10)\n      .attr(\"y\", 25);\n  }, [data, mapApi, dimension, selectedCountry]);\n\n  return (\n    <div ref={wrappedRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default WorldMap;\n","import React, { useEffect, useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport loadData from \"./Api\";\nimport \"./Control.css\";\nimport data from \"./GeoChart.world.geo.json\";\nimport HomePage from \"./Home\";\nimport WorldMap from \"./World\";\n\nexport default function Control() {\n  const [globaldata, setGlobaladata] = useState([]);\n  const [countrydata, setContrydata] = useState([]);\n  const [usadata, setUsadata] = useState([]);\n  const [searchCountry, setSearchCountry] = useState(\"\");\n  const [searchUsaState, setSearchUsaState] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadingError, setLoadingError] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const apiResult = await loadData();\n      if (apiResult) {\n        setContrydata(apiResult.countryData);\n        setUsadata(apiResult.usaData);\n        setGlobaladata(apiResult.globalData);\n        setIsLoading(false);\n      } else {\n        setLoadingError(true);\n        console.log(\"Error loading data\");\n      }\n    })();\n  }, []);\n\n  if (loadingError) {\n    return <h1> Error when loading data</h1>;\n  }\n  if (isLoading) {\n    return <h1> Loading... </h1>;\n  }\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/\">\n          <HomePage\n            countrydata={countrydata}\n            globaldata={globaldata}\n            usadata={usadata}\n            searchCountry={searchCountry}\n            setSearchCountry={setSearchCountry}\n            searchUsaState={searchUsaState}\n            setSearchUsaState={setSearchUsaState}\n          />\n        </Route>\n        <Route path=\"/map\">\n          <WorldMap countrydata={countrydata} data={data} />\n        </Route>\n      </Switch>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { HashRouter as Router, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Control from \"./Control\";\nimport image from \"../assets/covid.png\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Navbar\n        collapseOnSelect\n        expand=\"lg\"\n        bg=\"dark\"\n        variant=\"dark\"\n        sticky=\"top\"\n      >\n        <Navbar.Brand>\n          <Link to=\"/\">\n            <img\n              src={image}\n              width=\"50\"\n              height=\"50\"\n              margin-right=\"10px\"\n              alt=\"logo\"\n            />\n          </Link>\n          COVID-19 Dashboard\n        </Navbar.Brand>\n\n        <Nav className=\"ml-auto\">\n          <Nav.Link href=\"./\">Home</Nav.Link>\n          <Nav.Link eventKey={2} href=\"./map\">\n            Map\n          </Nav.Link>\n        </Nav>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      </Navbar>\n      <Control />\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","module.exports = __webpack_public_path__ + \"static/media/covid.572a0bd4.png\";"],"sourceRoot":""}