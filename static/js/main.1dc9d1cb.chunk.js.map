{"version":3,"sources":["components/Control/Api.js","components/Sidebar/Sidebar.js","components/Table/index.js","components/SearchForm.js","components/Home/index.js","components/Map/useResizeObserver.js","components/Map/index.js","components/Control/index.js","components/App.js","index.js","assets/covid.png"],"names":["loadData","axios","all","get","then","response","globalData","data","countryData","usaData","catch","error","console","log","Sidebar","globaldata","lastupdated","moment","updated","startOf","fromNow","Card","Body","Header","style","fontSize","Text","className","cases","recovered","deaths","critical","active","todayCases","todayDeaths","Footer","DataTable","rows","searchTerm","columns","searchColumn","filteredData","filter","item","toLowerCase","includes","map","column","i","key","country","index","name","ReusableSearchForm","setSearchText","searchText","placeholder","Form","Row","onSubmit","ev","preventDefault","Group","as","Col","Control","value","type","onChange","event","target","HomePage","countrydata","usadata","searchCountry","setSearchCountry","searchUsaState","setSearchUsaState","modifiedUsaData","row","Container","SearchForm","useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","WorldMap","svgRef","useRef","wrappedRef","dimension","selectedCountry","setSelectedCountry","tooltip","setToolTip","mapApi","features","mapCountry","countryCode","properties","iso_a3","covid","find","cd","countryInfo","iso3","select","append","attr","svg","maxInfection","max","feature","getBoundingClientRect","width","height","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","selectAll","join","on","d","pageX","pageY","transition","duration","html","activeCases","colorBucket","Math","log10","c","color","opacity","marginBottom","setGlobaladata","setContrydata","setUsadata","isLoading","setIsLoading","loadingError","setLoadingError","a","apiResult","exact","path","App","Navbar","collapseOnSelect","expand","bg","variant","sticky","Brand","to","src","image","margin-right","alt","Nav","Link","href","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1dc9d1cb.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst loadData = () => {\n  return axios\n    .all([\n      axios.get(\"https://corona.lmao.ninja/v2/all\"),\n      axios.get(\"https://corona.lmao.ninja/v2/countries?yesterday&sort\"),\n      axios.get(\"https://corona.lmao.ninja/v2/states?sort&yesterday\"),\n    ])\n    .then((response) => {\n      return {\n        globalData: response[0].data,\n        countryData: response[1].data,\n        usaData: response[2].data,\n      };\n    })\n    .catch((error) => {\n      console.log(error);\n      return {};\n    });\n};\n\nexport default loadData;\n","import React from \"react\";\nimport \"./Sidebar.css\";\nimport { Card } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst Sidebar = ({ globaldata }) => {\n  let lastupdated = moment(globaldata.updated).startOf(\"hour\").fromNow();\n\n  return (\n    <div>\n      <Card>\n        <Card.Body>\n          <Card.Header style={{ fontSize: \"25px\" }}>Global Data</Card.Header>\n          <div style={{ fontSize: \"20px\" }}>\n            <Card.Text>\n              Total Cases: <span className=\"cases\">{globaldata.cases}</span>\n            </Card.Text>\n            <Card.Text>\n              Recovered:{\" \"}\n              <span className=\"recovered\">{globaldata.recovered}</span>{\" \"}\n            </Card.Text>\n            <Card.Text>\n              Deaths: <span className=\"deaths\">{globaldata.deaths}</span>\n            </Card.Text>\n            <Card.Text>\n              {\" \"}\n              Critical: <span className=\"critical\">{globaldata.critical}</span>\n            </Card.Text>\n            <Card.Text>\n              Active Cases: <span className=\"active\"> {globaldata.active}</span>\n            </Card.Text>\n            <Card.Text>\n              New Cases:{\" \"}\n              <span className=\"new-cases\">{globaldata.todayCases}</span>{\" \"}\n            </Card.Text>\n            <Card.Text>\n              {\" \"}\n              New Deaths:\n              <span className=\"new-deaths\">{globaldata.todayDeaths}</span>\n            </Card.Text>\n          </div>\n        </Card.Body>\n        <Card.Footer>\n          <Card.Header className=\"text-muted\">\n            {\" \"}\n            Last updated: {lastupdated}\n          </Card.Header>\n          {/* <Card.Text className=\"text-muted\"> {lastupdated}</Card.Text> */}\n        </Card.Footer>\n      </Card>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport \"./Table.css\";\nimport PropTypes from \"prop-types\";\nimport { StickyTable, Row as TableRow, Cell } from \"react-sticky-table\";\n// import { Row, Card, Col } from \"react-bootstrap\";\n\nconst DataTable = ({ rows, searchTerm, columns, searchColumn }) => {\n  // let lastupdated = moment(globaldata.updated).startOf(\"hour\").fromNow();\n\n  const columnHeaders = [\n    \"Name\",\n    \"Cases\",\n    \"Active\",\n    \"Recovered\",\n    \"Deaths\",\n    \"NewCases\",\n    \"NewDeaths\",\n  ];\n\n  const filteredData =\n    searchTerm === \"\"\n      ? rows\n      : rows.filter((item) =>\n          item[searchColumn].toLowerCase().includes(searchTerm.toLowerCase())\n        );\n\n  return (\n    <>\n      <StickyTable>\n        <TableRow className=\"header\" style={{}}>\n          {columnHeaders.map((column, i) => (\n            <Cell key={i}>{column}</Cell>\n          ))}\n        </TableRow>\n\n        {filteredData.map((country, index) => (\n          <TableRow key={index} className={index % 2 === 0 ? \"odd\" : \"even\"}>\n            {columns.map((name, i) => (\n              <Cell key={i}> {country[name]}</Cell>\n            ))}\n          </TableRow>\n        ))}\n      </StickyTable>\n    </>\n  );\n};\n\nDataTable.propTypes = {\n  rows: PropTypes.array,\n};\nexport default DataTable;\n","import React from \"react\";\nimport { Col, Form } from \"react-bootstrap\";\n\nconst ReusableSearchForm = ({ setSearchText, searchText, placeholder }) => {\n  return (\n    <Form>\n      <Form.Row onSubmit={(ev) => ev.preventDefault()}>\n        <div className=\"mb-2 ml-auto\">\n          <Form.Group as={Col}>\n            <Form.Control\n              value={searchText}\n              type=\"text\"\n              placeholder={placeholder}\n              onChange={(event) => setSearchText(event.target.value)}\n            />\n          </Form.Group>\n        </div>\n      </Form.Row>\n    </Form>\n  );\n};\n\nexport default ReusableSearchForm;\n","import React from \"react\";\nimport \"./Home.css\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport DataTable from \"../Table\";\nimport SearchForm from \"../SearchForm\";\nimport { Container } from \"react-bootstrap\";\n\nexport default function HomePage({\n  countrydata,\n  globaldata,\n  usadata,\n  searchCountry,\n  setSearchCountry,\n  searchUsaState,\n  setSearchUsaState,\n}) {\n  const modifiedUsaData = usadata.map((row) => ({\n    ...row,\n    recovered: row.cases - row.active,\n  }));\n\n  return (\n    <>\n      <Container>\n        <div className=\"row\">\n          <div className=\"col-xs-12 col-md-3\">\n            <Sidebar globaldata={globaldata} />\n          </div>\n\n          {/* CountryWise data */}\n          <div className=\"col\">\n            {\" \"}\n            <h1>World COVID-19 Stats</h1>\n            <SearchForm\n              setSearchText={setSearchCountry}\n              searchText={searchCountry}\n              placeholder=\"Search a country\"\n            />\n            <div className=\"data\">\n              <DataTable\n                rows={countrydata}\n                searchTerm={searchCountry}\n                searchColumn=\"country\"\n                columns={[\n                  \"country\",\n                  \"cases\",\n                  \"active\",\n                  \"recovered\",\n                  \"deaths\",\n                  \"todayCases\",\n                  \"todayDeaths\",\n                ]}\n              />\n            </div>\n            {/* USA API */}\n            <h1>USA COVID-19 Stats</h1>\n            <SearchForm\n              setSearchText={setSearchUsaState}\n              searchText={searchUsaState}\n              placeholder=\"Search State\"\n            />\n            <div className=\"data\">\n              <DataTable\n                rows={modifiedUsaData}\n                searchTerm={searchUsaState}\n                searchColumn=\"state\"\n                columns={[\n                  \"state\",\n                  \"cases\",\n                  \"active\",\n                  \"recovered\",\n                  \"deaths\",\n                  \"todayCases\",\n                  \"todayDeaths\",\n                ]}\n              />\n            </div>\n          </div>\n        </div>\n      </Container>\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\n/**\n * Hook, that returns the current dimensions of an HTML element.\n * Doesn't play well with SVG.\n */\n\nconst useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport \"./Map.css\";\nimport { select, geoMercator, geoPath, max, event, color } from \"d3\";\n\nimport useResizeObserver from \"./useResizeObserver\";\n\nfunction WorldMap({ data, countrydata }) {\n  const svgRef = useRef();\n  const wrappedRef = useRef();\n  const dimension = useResizeObserver(wrappedRef);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [tooltip, setToolTip] = useState(null);\n\n  // combining worldMap data with Covid 19 API\n  const mapApi = data.features.map((mapCountry) => {\n    const countryCode = mapCountry.properties.iso_a3;\n    const covid = countrydata.find((cd) => {\n      return cd.countryInfo.iso3 === countryCode;\n    });\n    mapCountry.properties.covid = covid;\n    return { ...mapCountry, properties: { ...mapCountry.properties, covid } };\n  });\n\n  useEffect(() => {\n    // tooltip\n    let tooltip = select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"opacity\", 0);\n    setToolTip(tooltip);\n  }, []);\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    // const minInfection = min(mapApi, (feature) => {\n    //   if (!feature.properties.covid) return null;\n    //   return feature.properties.covid.active;\n    // });\n    const maxInfection = max(mapApi, (feature) => {\n      if (!feature.properties.covid) return null;\n      return feature.properties.covid.active;\n    });\n\n    //use resize dimension\n    //but fall back to getBoundingClientRect, if no dimension yet.\n    const { width, height } =\n      dimension || wrappedRef.current.getBoundingClientRect();\n\n    // project geo-co-ordinates on a 2D plane\n    const projection = geoMercator()\n      .fitSize([width, height], selectedCountry || data)\n      .precision(100);\n\n    // takes geojson data,\n    // transforms that into the d attribute of a path element\n    const pathGenerator = geoPath().projection(projection);\n\n    // render each country\n    svg\n      .selectAll(\".country\")\n      .data(data.features)\n      .join(\"path\")\n      // for zooming map\n      .on(\"click\", (feature) => {\n        setSelectedCountry(selectedCountry === feature ? null : feature);\n      })\n      .on(\"mousemove\", function (d) {\n        tooltip\n          .style(\"left\", event.pageX + 15 + \"px\")\n          .style(\"top\", event.pageY - 28 + \"px\");\n      })\n      .on(\"mouseover\", (d, i) => {\n        console.log(d);\n        const covid = d.properties.covid;\n\n        if (covid) {\n          tooltip.transition().duration(250).style(\"opacity\", 1);\n          tooltip\n            .html(\n              `<div>\n              \n          <h3>${covid.country}</h3>\n          <ul>\n          <li>Cases: ${covid.cases}</li>\n            <li>Active: ${covid.active}</li>\n            <li>Critical: ${covid.critical}</li>\n            <li>Death: ${covid.deaths}</li>\n          </ul>\n          </div>`\n            )\n            .style(\"left\", event.pageX + 15 + \"px\")\n            .style(\"top\", event.pageY - 28 + \"px\");\n        } else {\n          tooltip.transition().duration(250).style(\"opacity\", 0);\n        }\n      })\n      .on(\"mouseout\", function (d) {\n        tooltip.transition().duration(250).style(\"opacity\", 0);\n      })\n      .attr(\"class\", \"country\")\n      .attr(\"fill\", (feature) => {\n        const activeCases =\n          (feature.properties.covid && feature.properties.covid.active) || 0;\n        const colorBucket = Math.log10(Math.max(activeCases, 1));\n        const c = color(\"#FF0000\");\n        c.opacity = colorBucket / Math.log10(maxInfection);\n        // console.log(`country ${feature.properties.name} opacity, ${c.opacity}`);\n        return c;\n      })\n      .attr(\"stroke\", \"black\")\n      .transition()\n      .attr(\"d\", (feature) => pathGenerator(feature));\n  }, [data, mapApi, dimension, selectedCountry, tooltip]);\n\n  return (\n    <div ref={wrappedRef} style={{ marginBottom: \"2rem\" }}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default WorldMap;\n","import React, { useEffect, useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport loadData from \"./Api\";\nimport data from \"./GeoChart.world.geo.json\";\nimport HomePage from \"../Home\";\nimport WorldMap from \"../Map\";\n\nexport default function Control() {\n  const [globaldata, setGlobaladata] = useState([]);\n  const [countrydata, setContrydata] = useState([]);\n  const [usadata, setUsadata] = useState([]);\n  const [searchCountry, setSearchCountry] = useState(\"\");\n  const [searchUsaState, setSearchUsaState] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [loadingError, setLoadingError] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const apiResult = await loadData();\n      if (apiResult) {\n        setContrydata(apiResult.countryData);\n        setUsadata(apiResult.usaData);\n        setGlobaladata(apiResult.globalData);\n        setIsLoading(false);\n      } else {\n        setLoadingError(true);\n        console.log(\"Error loading data\");\n      }\n    })();\n  }, []);\n\n  if (loadingError) {\n    return <h1> Error when loading data</h1>;\n  }\n  if (isLoading) {\n    return <h1> Loading... </h1>;\n  }\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/\">\n          <HomePage\n            countrydata={countrydata}\n            globaldata={globaldata}\n            usadata={usadata}\n            searchCountry={searchCountry}\n            setSearchCountry={setSearchCountry}\n            searchUsaState={searchUsaState}\n            setSearchUsaState={setSearchUsaState}\n          />\n        </Route>\n        <Route path=\"/map\">\n          <WorldMap countrydata={countrydata} data={data} />\n        </Route>\n      </Switch>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { HashRouter as Router, Link } from \"react-router-dom\";\nimport Control from \"./Control\";\nimport image from \"../assets/covid.png\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Navbar\n        collapseOnSelect\n        expand=\"lg\"\n        bg=\"dark\"\n        variant=\"dark\"\n        sticky=\"top\"\n      >\n        <Navbar.Brand>\n          <Link to=\"/\">\n            <img\n              src={image}\n              width=\"50\"\n              height=\"50\"\n              margin-right=\"10px\"\n              alt=\"logo\"\n            />\n          </Link>\n          COVID-19 Dashboard\n        </Navbar.Brand>\n\n        <Nav className=\"ml-auto\">\n          <Nav.Link href=\"#/\">Home</Nav.Link>\n          <Nav.Link href=\"#/map\">Map</Nav.Link>\n        </Nav>\n      </Navbar>\n      <Control />\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","module.exports = __webpack_public_path__ + \"static/media/covid.572a0bd4.png\";"],"sourceRoot":""}